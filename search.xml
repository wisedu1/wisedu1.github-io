<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>spring mvc 总结</title>
    <url>/2021/04/27/SpringMVC%E6%A1%86%E6%9E%B6%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="Spring-MVC-框架总结"><a href="#Spring-MVC-框架总结" class="headerlink" title="Spring MVC 框架总结"></a>Spring MVC 框架总结</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近开始接触 Spring MVC，但是零零散散，没有在大脑里形成系统的知识结构体系，于是在此进行了梳理。</p>
<h2 id="什么是-MVC"><a href="#什么是-MVC" class="headerlink" title="什么是 MVC"></a>什么是 MVC</h2><p>Spring MVC 是 Spring 框架的一个模块，Spring MVC 和 Spring 无需通过中间整合层进行整合。</p>
<p>Spring MVC 是一个基于 MVC 的 web 框架。</p>
<p><strong>MVC</strong> 模式是软件工程中的一种软件架构模式，把软件系统分为三个基本部分：</p>
<ul>
<li>控制器(<strong>C</strong>ontroller)——负责转发请求，对请求进行处理。</li>
<li>视图 (<strong>V</strong>iew)——界面设计人员进行图形界面设计。</li>
<li>模型 (<strong>M</strong>odel)——程序员编写程序应有的功能、数据库专家进行数据管理和数据库设计。</li>
</ul>
<p>所以，MVC 模式将程序划分了三个组件，<strong>模型 (Model)</strong> 用于封装与应用程序的业务逻辑相关的数据以及对数据的处理方法。<strong>视图 (View)</strong> 负责展示数据，<strong>控制器 (Contoller)</strong> 处理事件并作出响应（事件包括用户的行为，比如请求）和数据 Model 上的改变。</p>
<ul>
<li>用户发起 request 请求至控制器 (Controller)，控制器接收用户请求的数据，委托给模型进行处理</li>
<li>控制器通过模型处理数据并得到处理结果，模型通常是指业务逻辑</li>
<li>模型处理结果返回给控制器</li>
<li>控制器将模型数据在视图中展示，web 中模型无法将数据直接在视图上显示，需要通过控制器完成</li>
<li>控制器将视图 response 响应给用户，通过视图展示给用户要的数据或处理结果</li>
</ul>
<h2 id="Spring-MVC-核心架构"><a href="#Spring-MVC-核心架构" class="headerlink" title="Spring MVC 核心架构"></a>Spring MVC 核心架构</h2><p><a href="https://imgtu.com/i/6b42nK"><img src="https://z3.ax1x.com/2021/03/24/6b42nK.jpg" alt="6b42nK.jpg"></a></p>
<ol>
<li>用户发起请求到前端控制器 (DispatcherServlet)</li>
<li>前端控制器请求处理器映射器 HandlerMapping 查找 Handler，可以根据 xml 配置、注解进行查找</li>
<li>处理器映射器 HandlerMapping 向前端控制器返回 Handler</li>
<li>前端控制器调用处理器适配器 HandlerAdapter 去执行 Handler</li>
<li>处理器适配器去执行 Handler</li>
<li>处理器适配器向前端控制器返回 ModelAndView，它是 Spirng MVC 框架的一个底层对象，包括 Model 和 View</li>
<li>前端控制器请求视图解析器 ViewResolver 去进行视图解析，根据逻辑视图名解析成真正的视图</li>
<li>视图解析器 向前端控制器返回 View</li>
<li>前端控制器进行视图渲染，视图渲染将模型数据（在 ModelAndView 对象中）填充到 request 域</li>
<li>前端控制器向用户响应结果</li>
</ol>
<p>通常，一个项目是由 Spring + SpringMVC + MyBatis 三大框架整合的 SSM 框架完成。</p>
<h2 id="Spring-MVC-常用注解"><a href="#Spring-MVC-常用注解" class="headerlink" title="Spring MVC 常用注解"></a>Spring MVC 常用注解</h2><ol>
<li><p>@Controller</p>
<p>负责注册一个 bean 到 Spring Context中。</p>
</li>
<li><p>@RequstMapping</p>
<p>注解为控制器指定可以处理那些 URL 请求。</p>
</li>
<li><p>@RequstBody</p>
<p>该注解用于读取 <code>Request</code> 请求的 body 部分数据，使用系统默认配置的 <code>HttpMessageConverter</code> 进行解析，然后把响应的数据绑定到要返回的对象上，再把 <code>HttpMessageConverter</code> 返回的对象数据绑定到 controller 中方法的参数上。</p>
</li>
<li><p>@ResponseBody</p>
<p>该注解用于将 controller 的方法返回的对象通过适当的 <code>HttpMessageConverter</code> 转换成为指定格式后，写入到 <code>Response</code> 对象的 body 数据区。</p>
</li>
<li><p>@ModelAttribute</p>
<p>在方法定义上使用 @ModelAttribute 注解：Spring MVC 在调用目标处理方法前，会先逐个调用在方法级上标注了 @ModelAttribute 的方法。</p>
<p>在方法的入参前使用 @ModelAttribute 注解：可以从隐含对象中获取隐含的模型数据中获取对象，再将请求参数绑定到对象中，再传入入参将方法入参对象添加到模型中。</p>
</li>
<li><p>@RequstParam</p>
<p>在处理方法入参处使用 @RequestParam 可以把请求参数传递给请求方法。</p>
</li>
<li><p>@PathVariable</p>
<p>绑定 URL 占位符到入参。</p>
</li>
<li><p>@ExceptionHandler</p>
<p>注解到方法上，出现异常时会执行该方法。</p>
</li>
<li><p>@ControllerAdvice</p>
<p>使一个 Controller 成为全局的异常处理类，类中使用 @ExceptionHandler 注解的方法可以处理所有 Controller 发生的异常。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
</search>
